{
  "info": {
    "name": "Trivia Board Game API",
    "description": "Complete collection for testing the Trivia Board Game Backend API. Covers all user stories including Game Master question management, user profile creation, game sessions, and answer submissions.",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Check if the API is running and healthy"
      },
      "response": [
        {
          "name": "Health Check Success",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"status\": \"success\",\n  \"message\": \"API is healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00.000Z\"\n}"
        }
      ]
    },
    {
      "name": "Root Endpoint",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/",
          "host": ["{{base_url}}"],
          "path": [""]
        },
        "description": "Test the root endpoint to verify API is accessible"
      }
    },
    {
      "name": "Questions (Game Master)",
      "item": [
        {
          "name": "Get All Questions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/questions",
              "host": ["{{base_url}}"],
              "path": ["questions"]
            },
            "description": "Retrieve all trivia questions. Returns questions ordered by newest first with total count. Used by Game Master to view question bank."
          },
          "response": [
            {
              "name": "Get All Questions Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/questions",
                  "host": ["{{base_url}}"],
                  "path": ["questions"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": \"success\",\n  \"message\": \"Questions retrieved successfully\",\n  \"data\": {\n    \"questions\": [],\n    \"total_questions\": 0\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Single Question",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/questions/{{question_id}}",
              "host": ["{{base_url}}"],
              "path": ["questions", "{{question_id}}"]
            },
            "description": "Retrieve a specific trivia question by ID"
          }
        },
        {
          "name": "Create Question",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Store the created question ID for other requests",
                  "if (responseCode.code === 201) {",
                  "    const responseBody = pm.response.json();",
                  "    if (responseBody.data && responseBody.data.id) {",
                  "        pm.collectionVariables.set('question_id', responseBody.data.id);",
                  "        console.log('Stored question_id:', responseBody.data.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"category\": \"Science\",\n  \"question\": \"What is the chemical symbol for gold?\",\n  \"answers\": [\"Au\", \"Ag\", \"Go\", \"Gd\"],\n  \"correct_answer_index\": 0,\n  \"score\": 10,\n  \"is_ai_generated\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/questions",
              "host": ["{{base_url}}"],
              "path": ["questions"]
            },
            "description": "Create a new trivia question. Validates required fields, ensures 2-4 answers, requires score field, and allows AI-generated tagging."
          }
        },
        {
          "name": "Update Question",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"category\": \"Science\",\n  \"question\": \"What is the chemical symbol for gold? (Updated)\",\n  \"answers\": [\"Au\", \"Ag\", \"Go\", \"Gd\"],\n  \"correct_answer_index\": 0,\n  \"score\": 15,\n  \"is_ai_generated\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/questions/{{question_id}}",
              "host": ["{{base_url}}"],
              "path": ["questions", "{{question_id}}"]
            },
            "description": "Update an existing trivia question. Will fail if question is currently in use in an active game session."
          }
        },
        {
          "name": "Delete Question",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/questions/{{question_id}}",
              "host": ["{{base_url}}"],
              "path": ["questions", "{{question_id}}"]
            },
            "description": "Delete a trivia question. Will fail if question is currently in use in an active game session."
          }
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Store the created user ID for session creation",
                  "if (responseCode.code === 201) {",
                  "    const responseBody = pm.response.json();",
                  "    if (responseBody.data && responseBody.data.user_id) {",
                  "        pm.collectionVariables.set('user_id', responseBody.data.user_id);",
                  "        console.log('Stored user_id:', responseBody.data.user_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testplayer\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Create a new user profile. Username is optional - if not provided, a unique username will be generated."
          }
        },
        {
          "name": "Create User (Auto-generated Username)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Store the created user ID for session creation",
                  "if (responseCode.code === 201) {",
                  "    const responseBody = pm.response.json();",
                  "    if (responseBody.data && responseBody.data.user_id) {",
                  "        pm.collectionVariables.set('user_id_auto', responseBody.data.user_id);",
                  "        console.log('Stored auto user_id:', responseBody.data.user_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Create a new user with auto-generated username"
          }
        },
        {
          "name": "Get User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Get user information by user ID"
          }
        }
      ]
    },
    {
      "name": "Game Sessions",
      "item": [
        {
          "name": "Create New Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Store the created session ID for answer submission",
                  "if (responseCode.code === 201) {",
                  "    const responseBody = pm.response.json();",
                  "    if (responseBody.data && responseBody.data.session_id) {",
                  "        pm.collectionVariables.set('session_id', responseBody.data.session_id);",
                  "        console.log('Stored session_id:', responseBody.data.session_id);",
                  "        ",
                  "        // Store the first question ID for answer submission",
                  "        if (responseBody.data.selected_questions && responseBody.data.selected_questions.length > 0) {",
                  "            pm.collectionVariables.set('first_question_id', responseBody.data.selected_questions[0].id);",
                  "            console.log('Stored first_question_id:', responseBody.data.selected_questions[0].id);",
                  "        }",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"time_limit\": 1800\n}"
            },
            "url": {
              "raw": "{{base_url}}/sessions",
              "host": ["{{base_url}}"],
              "path": ["sessions"]
            },
            "description": "Create a new game session with 16 questions across 4 categories. Optional time_limit in seconds."
          }
        },
        {
          "name": "Create Session (No Time Limit)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sessions",
              "host": ["{{base_url}}"],
              "path": ["sessions"]
            },
            "description": "Create a new game session without time limit"
          }
        },
        {
          "name": "Get Session Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/sessions/{{session_id}}",
              "host": ["{{base_url}}"],
              "path": ["sessions", "{{session_id}}"]
            },
            "description": "Get the current status of a game session including progress, questions, and user answers"
          }
        },
        {
          "name": "Submit Answer (Correct)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question_id\": \"{{first_question_id}}\",\n  \"answer_index\": 0,\n  \"user_id\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sessions/{{session_id}}/answer",
              "host": ["{{base_url}}"],
              "path": ["sessions", "{{session_id}}", "answer"]
            },
            "description": "Submit an answer for a specific question in a session. Requires user_id for security. One attempt per question allowed."
          }
        },
        {
          "name": "Submit Answer (Wrong)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question_id\": \"{{first_question_id}}\",\n  \"answer_index\": 1,\n  \"user_id\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sessions/{{session_id}}/answer",
              "host": ["{{base_url}}"],
              "path": ["sessions", "{{session_id}}", "answer"]
            },
            "description": "Submit a wrong answer to test error handling and score calculation"
          }
        },
        {
          "name": "Submit Duplicate Answer (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question_id\": \"{{first_question_id}}\",\n  \"answer_index\": 0,\n  \"user_id\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sessions/{{session_id}}/answer",
              "host": ["{{base_url}}"],
              "path": ["sessions", "{{session_id}}", "answer"]
            },
            "description": "Attempt to submit answer for same question twice (should return 409 error)"
          }
        },
        {
          "name": "Get All Sessions (Game Master)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/sessions",
              "host": ["{{base_url}}"],
              "path": ["sessions"]
            },
            "description": "Get all game sessions with user details and progress (Game Master view)"
          }
        },
        {
          "name": "Get Sessions by Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/sessions?status=in_progress",
              "host": ["{{base_url}}"],
              "path": ["sessions"],
              "query": [
                {
                  "key": "status",
                  "value": "in_progress"
                }
              ]
            },
            "description": "Filter sessions by status (in_progress, user_won, user_lost, expired)"
          }
        },
        {
          "name": "Get Sessions by User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/sessions?user_id={{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["sessions"],
              "query": [
                {
                  "key": "user_id",
                  "value": "{{user_id}}"
                }
              ]
            },
            "description": "Filter sessions by specific user"
          }
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Invalid User ID Format",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"invalid-uuid\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sessions",
              "host": ["{{base_url}}"],
              "path": ["sessions"]
            },
            "description": "Test validation of user ID format (should return 400 error)"
          }
        },
        {
          "name": "Missing Required Fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{base_url}}/sessions",
              "host": ["{{base_url}}"],
              "path": ["sessions"]
            },
            "description": "Test missing required user_id field (should return 400 error)"
          }
        },
        {
          "name": "Non-existent User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/123e4567-e89b-12d3-a456-426614174000",
              "host": ["{{base_url}}"],
              "path": ["users", "123e4567-e89b-12d3-a456-426614174000"]
            },
            "description": "Test getting non-existent user (should return 404 error)"
          }
        },
        {
          "name": "Non-existent Question",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/questions/non-existent-id",
              "host": ["{{base_url}}"],
              "path": ["questions", "non-existent-id"]
            },
            "description": "Test getting non-existent question (should return 404 error)"
          }
        },
        {
          "name": "Non-existent Session",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/sessions/non-existent-session",
              "host": ["{{base_url}}"],
              "path": ["sessions", "non-existent-session"]
            },
            "description": "Test getting non-existent session (should return 404 error)"
          }
        },
        {
          "name": "Invalid Question Creation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Incomplete question?\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/questions",
              "host": ["{{base_url}}"],
              "path": ["questions"]
            },
            "description": "Test creating question with missing required fields (should return 400 error)"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the Trivia Game API"
    },
    {
      "key": "session_id",
      "value": "",
      "type": "string",
      "description": "Current game session ID"
    },
    {
      "key": "question_id",
      "value": "",
      "type": "string",
      "description": "Current question ID for testing"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "Current user ID"
    },
    {
      "key": "user_id_auto",
      "value": "",
      "type": "string",
      "description": "User ID with auto-generated username"
    },
    {
      "key": "first_question_id",
      "value": "",
      "type": "string",
      "description": "First question ID from created session"
    }
  ]
}
