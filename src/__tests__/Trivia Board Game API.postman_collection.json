{
	"info": {
		"_postman_id": "260f2516-b78c-4742-a848-54cf147af8c9",
		"name": "Trivia Board Game API",
		"description": "Complete collection for testing the Trivia Board Game Backend API. Covers all user stories including Game Master question management, user profile creation, game sessions, and answer submissions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14219180"
	},
	"item": [
		{
			"name": "Questions (Game Master)",
			"item": [
				{
					"name": "Get All Questions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions"
							]
						},
						"description": "Retrieve all trivia questions. Returns questions ordered by newest first with total count. Used by Game Master to view question bank."
					},
					"response": []
				},
				{
					"name": "Get Single Question",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/questions/{{question_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions",
								"{{question_id}}"
							]
						},
						"description": "Retrieve a specific trivia question by ID"
					},
					"response": []
				},
				{
					"name": "Create Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the created question ID for other requests",
									"if (responseCode.code === 201) {",
									"    const responseBody = pm.response.json();",
									"    if (responseBody.data && responseBody.data.id) {",
									"        pm.collectionVariables.set('question_id', responseBody.data.id);",
									"        console.log('Stored question_id:', responseBody.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category\": \"Science\",\n  \"question\": \"What is the chemical symbol for gold?\",\n  \"answers\": [\"Au\", \"Ag\", \"Go\", \"Gd\"],\n  \"correct_answer_index\": 0,\n  \"score\": 10,\n  \"is_ai_generated\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions"
							]
						},
						"description": "Create a new trivia question. Validates required fields, ensures 2-4 answers, requires score field, and allows AI-generated tagging."
					},
					"response": []
				},
				{
					"name": "Update Question",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category\": \"Science\",\n  \"question\": \"What is the chemical symbol for gold? (Updated)\",\n  \"answers\": [\"Au\", \"Ag\", \"Go\", \"Gd\"],\n  \"correct_answer_index\": 0,\n  \"score\": 13,\n  \"is_ai_generated\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/questions/{{question_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions",
								"{{question_id}}"
							]
						},
						"description": "Update an existing trivia question. Will fail if question is currently in use in an active game session."
					},
					"response": []
				},
				{
					"name": "Delete Question",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/questions/{{question_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions",
								"{{question_id}}"
							]
						},
						"description": "Delete a trivia question. Will fail if question is currently in use in an active game session."
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the created user ID for session creation",
									"if (responseCode.code === 201) {",
									"    const responseBody = pm.response.json();",
									"    if (responseBody.data && responseBody.data.user_id) {",
									"        pm.collectionVariables.set('user_id', responseBody.data.user_id);",
									"        console.log('Stored user_id:', responseBody.data.user_id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testplayer\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a new user profile. Username is optional - if not provided, a unique username will be generated."
					},
					"response": []
				},
				{
					"name": "Get User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Get user information by user ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Game Sessions",
			"item": [
				{
					"name": "Create New Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the created session ID for answer submission",
									"if (responseCode.code === 201) {",
									"    const responseBody = pm.response.json();",
									"    if (responseBody.data && responseBody.data.session_id) {",
									"        pm.collectionVariables.set('session_id', responseBody.data.session_id);",
									"        console.log('Stored session_id:', responseBody.data.session_id);",
									"        ",
									"        // Store the first question ID for answer submission",
									"        if (responseBody.data.selected_questions && responseBody.data.selected_questions.length > 0) {",
									"            pm.collectionVariables.set('first_question_id', responseBody.data.selected_questions[0].id);",
									"            console.log('Stored first_question_id:', responseBody.data.selected_questions[0].id);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"time_limit\": 1800\n}"
						},
						"url": {
							"raw": "{{base_url}}/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions"
							]
						},
						"description": "Create a new game session with 16 questions across 4 categories. Optional time_limit in seconds."
					},
					"response": []
				},
				{
					"name": "Get Session Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sessions/{{session_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions",
								"{{session_id}}"
							]
						},
						"description": "Get the current status of a game session including progress, questions, and user answers"
					},
					"response": []
				},
				{
					"name": "Submit Answer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"question_id\": \"{{first_question_id}}\",\n  \"answer_index\": 1,\n  \"user_id\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sessions/{{session_id}}/answer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions",
								"{{session_id}}",
								"answer"
							]
						},
						"description": "Submit a wrong answer to test error handling and score calculation"
					},
					"response": []
				},
				{
					"name": "Get All Sessions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions"
							]
						},
						"description": "Get all game sessions with user details and progress (Game Master view)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Invalid User ID Format",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"invalid-uuid\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions"
							]
						},
						"description": "Test validation of user ID format (should return 400 error)"
					},
					"response": []
				},
				{
					"name": "Missing Required Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions"
							]
						},
						"description": "Test missing required user_id field (should return 400 error)"
					},
					"response": []
				},
				{
					"name": "Non-existent User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/123e4567-e89b-12d3-a456-426614174000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"123e4567-e89b-12d3-a456-426614174000"
							]
						},
						"description": "Test getting non-existent user (should return 404 error)"
					},
					"response": []
				},
				{
					"name": "Non-existent Question",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/questions/non-existent-id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions",
								"non-existent-id"
							]
						},
						"description": "Test getting non-existent question (should return 404 error)"
					},
					"response": []
				},
				{
					"name": "Non-existent Session",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sessions/non-existent-session",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sessions",
								"non-existent-session"
							]
						},
						"description": "Test getting non-existent session (should return 404 error)"
					},
					"response": []
				},
				{
					"name": "Invalid Question Creation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"question\": \"Incomplete question?\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions"
							]
						},
						"description": "Test creating question with missing required fields (should return 400 error)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the API is running and healthy"
			},
			"response": []
		},
		{
			"name": "Root Endpoint",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Test the root endpoint to verify API is accessible"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "session_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "question_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id_auto",
			"value": "",
			"type": "string"
		},
		{
			"key": "first_question_id",
			"value": "",
			"type": "string"
		}
	]
}